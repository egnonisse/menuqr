// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

// Mod√®les pour l'authentification NextAuth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String        @unique
    password      String?
    emailVerified DateTime?
    image         String?
    // Nouveaux champs pour la validation des comptes
    isApproved    Boolean       @default(false)  // Validation par un super-admin
    approvedAt    DateTime?                      // Date d'approbation
    rejectedAt    DateTime?                      // Date de rejet
    rejectionReason String?                      // Raison du rejet
    role          UserRole      @default(PENDING) // R√¥le de l'utilisateur
    accounts      Account[]
    sessions      Session[]
    restaurant    Restaurant?
    subscription  Subscription?
    usageStats    UsageStats?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    ownerId       String?       @unique
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Mod√®les pour l'application Restaurant
model Restaurant {
    id           String              @id @default(cuid())
    name         String
    slug         String              @unique
    description  String?
    address      String?
    phone        String?
    email        String?
    openingHours Json?               // Nouveau champ pour les horaires
    tables       Table[]
    categories   Category[]
    menuItems    MenuItem[]
    homepage     Homepage?
    reservations Reservation[]
    feedbacks    Feedback[]
    settings     RestaurantSettings?
    orders       Order[]
    qrScans      QRScan[]           // Tracking des scans QR
    owner        User                @relation(fields: [ownerId], references: [id])
    ownerId      String              @unique
    createdAt    DateTime            @default(now())
    updatedAt    DateTime            @updatedAt
}

model Table {
    id           String     @id @default(cuid())
    number       String     // Chang√© de Int √† String pour supporter les identifiants alphanum√©riques
    qrCodeUrl    String?
    qrCodeData   String?    // Nouveau champ pour stocker les donn√©es du QR code
    restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
    restaurantId String
    feedbacks    Feedback[]
    orders       Order[]
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
}

model Category {
    id           String     @id @default(cuid())
    name         String
    emoji        String?    // Emoji pour la cat√©gorie (ex: ü•ó, üçΩÔ∏è, üç∞)
    description  String?
    order        Int        @default(0)
    restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
    restaurantId String
    menuItems    MenuItem[]
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
}

model MenuItem {
    id           String               @id @default(cuid())
    name         String
    description  String?
    price        Float
    image        String?              // Nouveau champ pour l'image du plat
    available    Boolean              @default(true)
    order        Int                  @default(0)
    restaurant   Restaurant           @relation(fields: [restaurantId], references: [id])
    restaurantId String
    category     Category             @relation(fields: [categoryId], references: [id])
    categoryId   String
    orderItems   OrderItem[]
    feedbackItems FeedbackMenuItem[]  // Relation vers les avis mentionnant ce plat
    createdAt    DateTime             @default(now())
    updatedAt    DateTime             @updatedAt
}

model Homepage {
    id                  String     @id @default(cuid())
    sliders             Json?
    presentation        String?
    categories          Json?
    testimonials        Json?
    reservationBtnText  String?
    socialLinks         Json?
    restaurant          Restaurant @relation(fields: [restaurantId], references: [id])
    restaurantId        String     @unique
    createdAt           DateTime   @default(now())
    updatedAt           DateTime   @updatedAt
}

model Reservation {
    id             String     @id @default(cuid())
    customerName   String
    customerPhone  String
    customerEmail  String?
    dateTime       DateTime
    peopleCount    Int
    notes          String?
    status         String     @default("confirmed")
    restaurant     Restaurant @relation(fields: [restaurantId], references: [id])
    restaurantId   String
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @updatedAt
}

model Feedback {
    id           String               @id @default(cuid())
    customerName String?
    rating       Int
    comment      String?
    isApproved   Boolean              @default(false) // Validation par l'admin
    restaurant   Restaurant           @relation(fields: [restaurantId], references: [id])
    restaurantId String
    table        Table?               @relation(fields: [tableId], references: [id])
    tableId      String?
    menuItems    FeedbackMenuItem[]   // Plats mentionn√©s dans cet avis
    createdAt    DateTime             @default(now())
    updatedAt    DateTime             @updatedAt
}

model RestaurantSettings {
    id                 String     @id @default(cuid())
    logoUrl            String?
    primaryColor       String     @default("#FF6600")
    commandeATable     Boolean    @default(false)
    showRating         Boolean    @default(true)  // Afficher la note du restaurant
    showReviews        Boolean    @default(true)  // Afficher les avis clients
    currency           String     @default("FCFA") // Devise: USD, EUR, FCFA
    restaurant         Restaurant @relation(fields: [restaurantId], references: [id])
    restaurantId       String     @unique
    createdAt          DateTime   @default(now())
    updatedAt          DateTime   @updatedAt
}

model Order {
    id           String     @id @default(cuid())
    tableNumber  String     // Chang√© de Int √† String pour supporter les identifiants alphanum√©riques
    customerName String?
    status       String     @default("pending") // pending, preparing, served, cancelled
    notes        String?
    totalAmount  Float      @default(0)
    restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
    restaurantId String
    table        Table?     @relation(fields: [tableId], references: [id])
    tableId      String?
    orderItems   OrderItem[]
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
}

model OrderItem {
    id         String   @id @default(cuid())
    quantity   Int      @default(1)
    price      Float
    notes      String?
    order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    orderId    String
    menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
    menuItemId String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}

// Table de liaison pour les plats mentionn√©s dans les avis
model FeedbackMenuItem {
    id           String   @id @default(cuid())
    feedback     Feedback @relation(fields: [feedbackId], references: [id], onDelete: Cascade)
    feedbackId   String
    menuItem     MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)
    menuItemId   String
    rating       Int?     // Note sp√©cifique pour ce plat (optionnel, 1-5)
    comment      String?  // Commentaire sp√©cifique pour ce plat
    createdAt    DateTime @default(now())
    
    @@unique([feedbackId, menuItemId]) // Un plat ne peut √™tre mentionn√© qu'une fois par avis
}

// Syst√®me de tarification et abonnements
model Subscription {
    id                String   @id @default(cuid())
    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId            String   @unique
    plan              Plan     @default(FREEMIUM)
    status            SubscriptionStatus @default(ACTIVE)
    stripeCustomerId  String?  // ID client Stripe
    stripeSubscriptionId String? // ID abonnement Stripe
    currentPeriodStart DateTime?
    currentPeriodEnd   DateTime?
    cancelAtPeriodEnd  Boolean  @default(false)
    maxRestaurants    Int      @default(1)
    maxScansPerMonth  Int      @default(50)
    features          Json?    // Fonctionnalit√©s activ√©es pour ce plan
    createdAt         DateTime @default(now())
    updatedAt         DateTime @updatedAt
}

model UsageStats {
    id              String   @id @default(cuid())
    user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId          String   @unique
    scansThisMonth  Int      @default(0)
    scansTotal      Int      @default(0)
    restaurantCount Int      @default(0)
    lastScanAt      DateTime?
    resetAt         DateTime @default(now()) // Date de reset mensuel
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model QRScan {
    id           String     @id @default(cuid())
    restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
    restaurantId String
    tableId      String?
    userAgent    String?
    ipAddress    String?
    country      String?
    city         String?
    scannedAt    DateTime   @default(now())
}

enum Plan {
    FREEMIUM  // 0‚Ç¨ - 1 restaurant, 50 scans/mois
    STARTER   // 15‚Ç¨ - 1 restaurant, commandes + avis
    GROWTH    // 39‚Ç¨ - 1-3 restaurants, analytics avanc√©s
    BUSINESS  // 79‚Ç¨ - 4-10 restaurants, multi-sites
    ENTERPRISE // Sur devis - 10+ restaurants, white-label
}

enum SubscriptionStatus {
    ACTIVE
    INACTIVE
    PAST_DUE
    CANCELED
    UNPAID
}

enum UserRole {
    PENDING      // En attente de validation
    ADMIN        // Administrateur de restaurant valid√©
    SUPER_ADMIN  // Super administrateur (peut valider les comptes)
    REJECTED     // Compte rejet√©
}
