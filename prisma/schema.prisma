// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Mod√®les pour l'authentification NextAuth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    password      String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    restaurant    Restaurant?
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    ownerId       String?   @unique
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Mod√®les pour l'application Restaurant
model Restaurant {
    id           String              @id @default(cuid())
    name         String
    slug         String              @unique
    description  String?
    address      String?
    phone        String?
    email        String?
    openingHours Json?               // Nouveau champ pour les horaires
    tables       Table[]
    categories   Category[]
    menuItems    MenuItem[]
    homepage     Homepage?
    reservations Reservation[]
    feedbacks    Feedback[]
    settings     RestaurantSettings?
    orders       Order[]
    owner        User                @relation(fields: [ownerId], references: [id])
    ownerId      String              @unique
    createdAt    DateTime            @default(now())
    updatedAt    DateTime            @updatedAt
}

model Table {
    id           String     @id @default(cuid())
    number       String     // Chang√© de Int √† String pour supporter les identifiants alphanum√©riques
    qrCodeUrl    String?
    qrCodeData   String?    // Nouveau champ pour stocker les donn√©es du QR code
    restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
    restaurantId String
    feedbacks    Feedback[]
    orders       Order[]
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
}

model Category {
    id           String     @id @default(cuid())
    name         String
    emoji        String?    // Emoji pour la cat√©gorie (ex: ü•ó, üçΩÔ∏è, üç∞)
    description  String?
    order        Int        @default(0)
    restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
    restaurantId String
    menuItems    MenuItem[]
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
}

model MenuItem {
    id           String      @id @default(cuid())
    name         String
    description  String?
    price        Float
    image        String?     // Nouveau champ pour l'image du plat
    available    Boolean     @default(true)
    order        Int         @default(0)
    restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
    restaurantId String
    category     Category    @relation(fields: [categoryId], references: [id])
    categoryId   String
    orderItems   OrderItem[]
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
}

model Homepage {
    id                  String     @id @default(cuid())
    sliders             Json?
    presentation        String?
    categories          Json?
    testimonials        Json?
    reservationBtnText  String?
    socialLinks         Json?
    restaurant          Restaurant @relation(fields: [restaurantId], references: [id])
    restaurantId        String     @unique
    createdAt           DateTime   @default(now())
    updatedAt           DateTime   @updatedAt
}

model Reservation {
    id             String     @id @default(cuid())
    customerName   String
    customerPhone  String
    customerEmail  String?
    dateTime       DateTime
    peopleCount    Int
    notes          String?
    status         String     @default("confirmed")
    restaurant     Restaurant @relation(fields: [restaurantId], references: [id])
    restaurantId   String
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @updatedAt
}

model Feedback {
    id           String     @id @default(cuid())
    customerName String?
    rating       Int
    comment      String?
    isApproved   Boolean    @default(false) // Validation par l'admin
    restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
    restaurantId String
    table        Table?     @relation(fields: [tableId], references: [id])
    tableId      String?
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
}

model RestaurantSettings {
    id                 String     @id @default(cuid())
    logoUrl            String?
    primaryColor       String     @default("#FF6600")
    commandeATable     Boolean    @default(false)
    showRating         Boolean    @default(true)  // Afficher la note du restaurant
    showReviews        Boolean    @default(true)  // Afficher les avis clients
    restaurant         Restaurant @relation(fields: [restaurantId], references: [id])
    restaurantId       String     @unique
    createdAt          DateTime   @default(now())
    updatedAt          DateTime   @updatedAt
}

model Order {
    id           String     @id @default(cuid())
    tableNumber  String     // Chang√© de Int √† String pour supporter les identifiants alphanum√©riques
    customerName String?
    status       String     @default("pending") // pending, preparing, served, cancelled
    notes        String?
    totalAmount  Float      @default(0)
    restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
    restaurantId String
    table        Table?     @relation(fields: [tableId], references: [id])
    tableId      String?
    orderItems   OrderItem[]
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
}

model OrderItem {
    id         String   @id @default(cuid())
    quantity   Int      @default(1)
    price      Float
    notes      String?
    order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
    orderId    String
    menuItem   MenuItem @relation(fields: [menuItemId], references: [id])
    menuItemId String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt
}
